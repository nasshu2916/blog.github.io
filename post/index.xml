<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on チラ裏</title>
    <link>https://blog.naoyakohda.net/post/</link>
    <description>チラ裏 (Posts)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 05 Dec 2020 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="https://blog.naoyakohda.net/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>EPS32とPrometheusで作業環境のデータ収集している話</title>
      <link>https://blog.naoyakohda.net/post/esp32_environment_logger/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.naoyakohda.net/post/esp32_environment_logger/</guid>
      <description>&lt;p&gt;この記事は &lt;a href=&#34;https://adventar.org/calendars/5174&#34;&gt;Akatsuki Advent Calendar 2020&lt;/a&gt; 5日目の記事です.&lt;/p&gt;
&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;アカツキでサーバエンジニアをしている &lt;a href=&#34;https://github.com/nasshu2916&#34;&gt;Naoya kohda&lt;/a&gt; です。現在、在宅勤務をしているのですが、厚生労働省が&lt;a href=&#34;https://www.mhlw.go.jp/stf/newpage_01603.html&#34;&gt;在宅勤務の作業環境のガイドライン&lt;/a&gt;として次のようにしています。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;テレワークを行う作業場が、自宅等の事業者が業務のために提供している作業場以外である場合には、事務所衛生基準規則（昭和47年労働省令第43号）、労働安全衛生規則及び「情報機器作業における労働衛生のためのガイドライン」（令和元年7月12日基発0712第3号）の衛生基準と同等の作業環境となるよう、テレワークを行う労働者に助言等を行うことが望ましい。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要するに「在宅勤務するならオフィスと同じ様な環境になるように努力しろ」ということです。なので、作業環境が妥当か聞かれた時にすぐにエビデンスを出せるように、作業環境のデータを収集するセンサを作りました。&lt;/p&gt;
&lt;h2 id=&#34;センサからデータの収集&#34;&gt;センサからデータの収集&lt;/h2&gt;
&lt;h3 id=&#34;仕様パーツ&#34;&gt;仕様パーツ&lt;/h3&gt;
&lt;p&gt;マイコンにESP32 DevKitCを使いました。&lt;/p&gt;
&lt;img src=&#34;https://akizukidenshi.com/img/goods/L/M-11819.jpg&#34; alt=&#34;esp32&#34; width=&#34;120&#34;&gt;
&lt;p&gt;Arduinoでも良かったのですが、デフォルトでWiFiが使えるのと安いから選びました。&lt;a href=&#34;https://github.com/espressif/arduino-esp32&#34;&gt;Arduino Core for the ESP32&lt;/a&gt;を使えばArduinoと同じ様に書き込みができます。ただloop()で処理を行うのでせっかくのデュアルコアを無駄にしている感があるのですが。&lt;/p&gt;
&lt;p&gt;CO2センサは &lt;a href=&#34;https://www.aliexpress.com/wholesale?SearchText=MH-Z19B&#34;&gt;aliexpress&lt;/a&gt; で買ったMH-Z19Bを使いました。国内でだとamazonとかで購入できます。MH-Z19BはCO2センサの中では安く2000円台で入手できます。&lt;/p&gt;
&lt;p&gt;温湿度センサは&lt;a href=&#34;https://akizukidenshi.com/catalog/g/gK-14469/&#34;&gt;秋月電子&lt;/a&gt;で買ったBME680を使いました。
&lt;img src=&#34;https://akizukidenshi.com/img/goods/C/K-14469.jpg&#34; alt=&#34;esp32&#34; width=&#34;120&#34;&gt;&lt;/p&gt;
&lt;p&gt;圧力、湿度、温度とガスの情報を計測できるセンサです。&lt;/p&gt;
&lt;p&gt;MH-Z19Bはハードウェアシリアル経由、BME680はI2C経由で接続しました。&lt;/p&gt;
&lt;p&gt;作ったものは下の画像のものです。(基板作るのが面倒くさくてブレッドボード上で動かしてます。)
&lt;img src=&#34;./senser.jpg&#34; alt=&#34;esp32&#34; width=&#34;480&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;監視&#34;&gt;監視&lt;/h2&gt;
&lt;p&gt;監視システムのざっくりとした構成図は下のようになりました。
&lt;img src=&#34;./overview.png&#34; alt=&#34;exporter&#34; width=&#34;480&#34;&gt;&lt;/p&gt;
&lt;p&gt;ESP32で取得した値を&lt;a href=&#34;https://www.switch-science.com/catalog/3647/&#34;&gt;M5 stack&lt;/a&gt; に付いているようなLCDディスプレイに表示させても良いのですが、&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;過去の情報も見たい&lt;/li&gt;
&lt;li&gt;CO2の濃度が高くなればどこかに通知したい&lt;/li&gt;
&lt;li&gt;面倒くさいのでできれば楽な実装が良い&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;このような条件がありました。そのため、ディスプレイに表示するのではなく、何かしらのツールで監視する必要があります。&lt;/p&gt;
&lt;p&gt;SaaS 系のメトリクス監視ツールがあるのですが、無料版だと制限があり、&lt;del&gt;こんなお遊びに&lt;/del&gt;お金を払う価値があるのかという問題が出てきます。そのため、できればOSSなどで無料で使えるものが良いという条件が加わりました。&lt;/p&gt;
&lt;p&gt;OSS の監視ツールとして有名なもののして &lt;a href=&#34;https://www.zabbix.com/&#34;&gt;Zabbix&lt;/a&gt; や &lt;a href=&#34;https://www.nagios.org/&#34;&gt;Nagios&lt;/a&gt;、&lt;a href=&#34;http://munin-monitoring.org/&#34;&gt;Munin&lt;/a&gt; などがありますが、今回は &lt;a href=&#34;https://prometheus.io/&#34;&gt;Prometheus&lt;/a&gt; を選びました。理由として、TSDB(時系列データベース)が Prometheus に内蔵されているため、1つのバイナリで動作します(Remote Storage にも対応していますが)。ため、他の監視ツールに比べ環境構築が非常に楽です。今回は Manjaro Linux 上で Prometheus を動かしたのですが、以下のコマンド1つでインストールが完了します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;yay -Syu prometheus
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;また、公式ページの&lt;a href=&#34;https://prometheus.io/docs/introduction/overview/#architecture&#34;&gt;アーキテクチャ図&lt;/a&gt;にある通り Pull 型の収集です。メトリクス公開側はリクエストに対して応答するシステムになるため、収集側の情報を保つ必要がなくなります(これでAPIキーをハードコーディングしなくて済む)。そのため、Prometheus に収集してもらうために exporter を作りました。&lt;a href=&#34;https://github.com/nasshu2916/ESP32_exporter&#34;&gt;[ソースコード]&lt;/a&gt;ESP32に対して GET リクエストを送った結果は下の画像の様になります。&lt;/p&gt;
&lt;img src=&#34;./exporter.png&#34; alt=&#34;exporter&#34; width=&#34;480&#34;&gt;
&lt;p&gt;また、Prometheus の設定としては&lt;code&gt;/etc/prometheus/prometheus.yml&lt;/code&gt;に次の様に収集対象の情報を足します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;scrape_configs&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;job_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;prometheus&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;static_configs&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;targets&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;localhost:9090&amp;#39;&lt;/span&gt;]
  - &lt;span style=&#34;color:#f92672&#34;&gt;job_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;EnvironmentalSensor&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;static_configs&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;targets&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IPAddress:Port&amp;#39;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ただ、Prometheus の欠点として収集したメトリクスの可視化に向いていない点です。実際、Prometheus で表示すると下の画像の様になります。&lt;/p&gt;
&lt;img src=&#34;./prometheus.png&#34; alt=&#34;exporter&#34; width=&#34;480&#34;&gt;
&lt;p&gt;そのため、 可視化には Prometheus ではなく Grafana で可視化を行います。Grafana で可視化した画面は下の様な感じです。
&lt;img src=&#34;https://user-images.githubusercontent.com/13119954/101245348-8fd55900-374f-11eb-84b3-bece9b410aec.png&#34; alt=&#34;exporter&#34; width=&#34;480&#34;&gt;&lt;/p&gt;
&lt;p&gt;これで作業環境が状態がすぐに分かるようになりました。また、Grafana 側で簡単に Slack などへの通知の設定を行えます。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CO2と温度、湿度センサの値を ESP32 で値を読み取る&lt;/li&gt;
&lt;li&gt;Prometheus で収集する用の exporter を ESP32 側に実装する&lt;/li&gt;
&lt;li&gt;Prometheus のメトリクスデータを Grafana で可視化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;余談&#34;&gt;余談&lt;/h2&gt;
&lt;p&gt;エアコンを付けていた時の室温のグラフなんですが、こうして見るとエアコンの温度制御がよく分かる。
&lt;img src=&#34;./temperature.png&#34; alt=&#34;exporter&#34; width=&#34;480&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;追記&#34;&gt;追記&lt;/h2&gt;
&lt;p&gt;温湿度センサ(BME680)のスペックシート眺めてたらこんなことが書いてあった。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CO2 equivalents (ppm)&lt;/th&gt;
&lt;th&gt;Estimation of the CO2 level in ppm. The sensor does not directly measure CO2, but derives this from the average correlation between VOCs and CO2 in human’s exhaled breath.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;BOSCHの&lt;a href=&#34;https://github.com/BoschSensortec/BME680_driver&#34;&gt;公式ライブラリ&lt;/a&gt;を使えば推定のCO2濃度が取れるらしい。CO2センサいらないじゃん。(最初にスペックシート読んでないことがバレてしまった。そもそも公式のライブラリがあるとは知らなかった。)&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>